Team Instructions:
Feel free to maintain your team.
If you prefer to work solo, still go ahead
If you want to switch teams, please let your current team know before you exit.
You can now increase your team population to a maximum of 6
As usual, you can decide to use Python or R, even within a team, but:
You have to submit them differently.
You have to provide all 4 functions for each language when submitting
Deadline: Sunday, 15th Feb.
Functions Galore!
Write a function for translating DNA to protein
Write a function that simulates and generates a logistic population growth curve. Your function should include 2 extra parameters that randomize the length of the lag phase and the exponential phase [See population curve here] . Most living populations follow a logistic population growth. Therefore, your growth curve can be: Population Size vs Time, Cell density vs Time, OD vs Time, CFU vs Time, etc
Using your function, generate a dataframe with 100 different growth curves
Write a function for determining the time to reach 80% of the maximum growth; usually the carrying capacity
Finally, write a function for calculating the hamming distance between your Slack username and twitter/X handle (synthesize if you don’t have one). Feel free to pad it with extra words if they are not of the same length.



# 1. Write a function for translating DNA to protein

# Python program to convert DNA to protein
def translate(seq):
    table = {
        'ATA':'I', 'ATC':'I', 'ATT':'I', 'ATG':'M', 
        'ACA':'T', 'ACC':'T', 'ACG':'T', 'ACT':'T', 
        'AAC':'N', 'AAT':'N', 'AAA':'K', 'AAG':'K', 
        'AGC':'S', 'AGT':'S', 'AGA':'R', 'AGG':'R',                  
        'CTA':'L', 'CTC':'L', 'CTG':'L', 'CTT':'L', 
        'CCA':'P', 'CCC':'P', 'CCG':'P', 'CCT':'P', 
        'CAC':'H', 'CAT':'H', 'CAA':'Q', 'CAG':'Q', 
        'CGA':'R', 'CGC':'R', 'CGG':'R', 'CGT':'R', 
        'GTA':'V', 'GTC':'V', 'GTG':'V', 'GTT':'V', 
        'GCA':'A', 'GCC':'A', 'GCG':'A', 'GCT':'A', 
        'GAC':'D', 'GAT':'D', 'GAA':'E', 'GAG':'E', 
        'GGA':'G', 'GGC':'G', 'GGG':'G', 'GGT':'G', 
        'TCA':'S', 'TCC':'S', 'TCG':'S', 'TCT':'S', 
        'TTC':'F', 'TTT':'F', 'TTA':'L', 'TTG':'L', 
        'TAC':'Y', 'TAT':'Y', 'TAA':'_', 'TAG':'_', 
        'TGC':'C', 'TGT':'C', 'TGA':'_', 'TGG':'W',
    }
    protein ="" 
    if len(seq)% 3 ==0: 
        for i in range (0, len(seq), 3): 
            codon = seq[i:i + 3]
            protein+= table.get(codon,"-*-")
    else:
        print("DNA sequence is not multiple of three")
    return protein
DNA_sequence= "TATXYZTACTAGXYZ" #YOU DONT necessarily need to download the code from ncbi you can write your own code.
translate(DNA_sequence)
ABC = translate(DNA_sequence)
print(ABC)


# 2. Write a function that simulates and generates a logistic population growth curve. Your function should include 2 extra parameters that randomize the length of the lag phase and the exponential phase [See population curve here] . Most living populations follow a logistic population growth. Therefore, your growth curve can be: Population Size vs Time, Cell density vs Time, OD vs Time, CFU vs Time, etc
Using your function, generate a dataframe with 100 different growth curves.

def logistic_growth(time, K=1500, r=0.5, N0=10, lag_variation=8, exp_variation=12):
    """
    Simulate logistic growth with randomized lag and exponential phases.
    - K: Carrying capacity
    - r: Growth rate
    - N0: Initial population
    - lag_variation: Random delay for lag phase
    - exp_variation: Random shift for exponential phase
    """
    # using linear congruential gnerator method
    seed = (time * 12345678) % 1000 # create a changing seed
    lag_time = seed % (lag_variation + 2) # Randomized lag phase duration
    exp_time = (seed * 3) % (exp_variation + 2) # Randomized exponential duration

    t_adjusted = max(0, time - lag_time) # Ensure time isn't negative

    #Using Taylor series
    exp_factor = 1 - (r * (t_adjusted - exp_time)) + ((r * (t_adjusted - exp_time)) **2) / 2

    #Logistic growth equation
    population = K / (1 + ((K - N0) / N0) * exp_factor)
    return population

# Generate 100 different growth curves
time_points = [i for i in range(101)] #Time range from 0 to 100
growth_curves = {}

for i in range(1, 101): #Genearate 100 curves
    growth_curves[f"Curve_{i}"] = [logistic_growth(t) for t in time_points]

# Print the first 5 time points of the first 3 curves
for curve, values in list(growth_curves.items())[:5]:
    print(f"{curve}: {values[:5]}...") #Show the first 5 values for each curve


# 3. Write a function for determining the time to reach 80% of the maximum growth; usually the carrying capacity

def time_to_80_percent_max(K, r, N0):
    """
    Calculate the time required to reach 80% of the carrying capacity(K)
    - K: Carrying capacity (maximum population)
    - r: Growth rate
    - N0: Initial population size
    """
    threshold = 0.8 * K # 80% of the carrying capacity
    # Solve for time using the logistic growth equation:
    # P(t) = K / (1 + ((K - N0) / N0) * exp(-r * t))
    # Rearranged to solve for t:
    t = (-1 / r) * ((K - N0) / (threshold - N0) -1) 
    return t 
K = 1500 # Carrying capacity
r = 0.5 # Growth rate
N0 = 10 # Initial population
  
time_80 = time_to_80_percent_max(K, r, N0)
print(f"Time to reach 80% of carrying capacity: {time_80:.2f}")

# 4. Finally, write a function for calculating the hamming distance between your Slack username and twitter/X handle (synthesize if you don’t have one). 
Feel free to pad it with extra words if they are not of the same length.

#twitter username: yunis_grace
#slack username: Eunice
usernames = ["yunis_grace", "EUNICE"]
for usn1 in usernames:
    for usn2 in usernames:
        if usn1 != usn2:
            print(f"Comparing {usn1} with {usn2}")
            hamming_distance = sum(usn1 != usn2 for usn1, usn2 in zip(usn1, usn2))
            print(f"Hamming distance between {usn1} and {usn2}: {hamming_distance}")

Group_members = {
    "Linkeldn username 1": "Modupe Oyelade",
    "Linkeldn username 2": "Eunice Olawale",
    "Linkeldn username 3": "Oboh jennifer"
    "Github link 1": "https://github.com/DrModupeO/Hackbio-biocoding-internship",
    "Github link 2": "https://github.com/Justcodeeunice/hackbio-biocoding-internship/tree/main",
    "Github link 3": "https://github.com/Aigberinjenny"
    }
print ("Group_members:")
for key, value in Group_members.items():
    print(f"{key}: {value}")





#STAGE 1 IN R
Solution for 1 in R
codon_db <- c("UUU"="Phe", "UUC"="Phe","UUA"="Leu", "UUC"="Leu")

test_cd <- "UUAUUAUUAUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUCUUCUUCUUCUUC"

translator <- function(inputCodon){
    
    split_seq <- strsplit(inputCodon, "")[[1]]
    #print(split_seq)
    codon_positions <- seq(1, length(split_seq), 3)

    ribosome_output <- c()

    for(i in codon_positions){
        curr_nuc <- split_seq[i:(i+2)]
        curr_nuc <- paste0(curr_nuc[1], curr_nuc[2], curr_nuc[3])
        #print(curr_nuc)
        ribosome_output <- c(ribosome_output, codon_db[curr_nuc])
    }

    return(ribosome_output)
}

translator(test_cd)

#start coding... 

population_maker <- function(k = 2, x_mid = 5, x){

    solution <- 1/(1 + exp(-k*(x - x_mid)))

    return(solution)
}

od_600 <- c()

for(i in 0:24){
    curr_od <- population_maker(k =0.25, x_mid = 10, x = i)
    od_600 <- c(od_600, curr_od)
}

#print(length(od_600))
#print(length(0:24))

plot(x = 0:24, y = od_600)

import math

def population_maker(x , k = 2, x_mid = 5):

    solution = 1/(1 + math.exp(-k*(x-x_mid)))

    return solution

#print(population_maker(k = 2, x_mid = 5, x = 10))

od_600 = []

for i in range(0,24):

    od_600.append(population_maker(x = i, k = 0.5, x_mid = 10))

print(od_600)

import seaborn as sns

sns.lineplot(x = range(0,24), y = od_600)


